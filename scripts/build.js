import fs from 'fs';
import path from 'path';
import * as esbuild from 'esbuild';

const args = process.argv.slice(2);
const devMode = args.includes('--dev');

/** @type {Partial<esbuild.BuildOptions>} */
const baseOptions = {
  bundle: true,
  minify: devMode ? false : true,
  format: 'esm',
  target: 'es2020',
  sourcemap: devMode ? 'external' : false,
  loader: { '.html': 'text', '.ttf': 'file' },
  // logLevel: 'error',
  define: {
    'process.env.SCRIPT_URL': `import.meta.url`,
  },
};

const workerBuild = () =>
  esbuild.build({
    ...baseOptions,
    entryPoints: ['src/lib/worker/index.ts'],
    outfile: 'build/racing-bars.worker.js',
    format: 'iife',
  });

const iifeBuild = () =>
  esbuild.build({
    ...baseOptions,
    entryPoints: ['src/index.ts'],
    outfile: 'build/racing-bars.umd.js',
    format: 'iife',
    globalName: 'racingBars',
    define: {
      'process.env.SCRIPT_URL': `document.currentScript.src`,
    },
  });

const esmBuild = () =>
  esbuild.build({
    ...baseOptions,
    entryPoints: ['src/index.ts'],
    outfile: 'build/racing-bars.js',
  });

const reactBuild = () =>
  esbuild.build({
    ...baseOptions,
    entryPoints: ['src/react.tsx'],
    outfile: 'build/react.js',
    external: ['react', 'react-dom'],
  });

const vueBuild = () =>
  esbuild.build({
    ...baseOptions,
    entryPoints: ['src/vue.ts'],
    outfile: 'build/vue.js',
    external: ['vue'],
    alias: {
      '@vue/runtime-core': 'vue',
    },
  });

export function css2ts() {
  const cssDir = path.resolve('src/lib/css/');
  const cssBaseFile = path.resolve(cssDir, 'styles.css');
  const tsFile = path.resolve('src/lib/styles/generated-styles.ts');
  const css = fs.readFileSync(cssBaseFile, 'utf8');

  let stylesContent = '// This file is auto-generated and will be over-written!\n';
  stylesContent += '// Please do NOT edit this file directly\n';
  stylesContent += '// You may edit files in this folder instead: ';
  stylesContent += path.relative('.', cssDir) + '\n\n';
  stylesContent += 'export const styles = `\n';
  stylesContent += css;
  stylesContent += '`;\n\n';

  stylesContent += 'export const themes = {\n';
  fs.readdirSync(cssDir).forEach((theme) => {
    if (theme.endsWith('.theme.css')) {
      const themeCss = fs.readFileSync(path.resolve(cssDir, theme), 'utf8');
      stylesContent += '"' + theme.split('.theme.css')[0] + '": `\n';
      stylesContent += themeCss;
      stylesContent += '`,\n';
    }
  });
  stylesContent += '};\n';

  fs.writeFileSync(tsFile, stylesContent);
}

css2ts();
workerBuild();
iifeBuild();
esmBuild();
reactBuild();
vueBuild();
